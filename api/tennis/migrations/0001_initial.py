# Generated by Django 2.0.3 on 2018-03-27 12:17

from django.conf import settings
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sports', '0003_auto_20180327_1217'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Extra data associated with this exchange')),
                ('end_at', models.ForeignKey(blank=True, help_text='Ending point for this exchange', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='end_point_for_exchanges', to='sports.VideoPoint')),
            ],
        ),
        migrations.CreateModel(
            name='ExchangePlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_winner', models.BooleanField(help_text='Has the player won the exchange')),
                ('side', models.CharField(choices=[('right', 'RIGHT'), ('left', 'LEFT')], help_text='Which side this player was on', max_length=6)),
                ('exchange', models.ForeignKey(help_text='Corresponding exchange', on_delete=django.db.models.deletion.CASCADE, to='tennis.Exchange')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(help_text='Index of this game in the set')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Extra data associated with this game')),
                ('end_at', models.ForeignKey(blank=True, help_text='Ending point for this game', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='end_point_for_games', to='sports.VideoPoint')),
            ],
        ),
        migrations.CreateModel(
            name='GamePlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_winner', models.BooleanField(help_text='Has the player won the game')),
                ('side', models.CharField(choices=[('right', 'RIGHT'), ('left', 'LEFT')], help_text='?', max_length=6)),
                ('exchanges_won', models.IntegerField(help_text='Number of exchanges won by this player in this game')),
                ('game', models.ForeignKey(help_text='Corresponding game', on_delete=django.db.models.deletion.CASCADE, to='tennis.Game')),
            ],
        ),
        migrations.CreateModel(
            name='Hit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Extra data associated with this hit')),
                ('exchange', models.ForeignKey(help_text='Exchange associated with this hit', on_delete=django.db.models.deletion.CASCADE, related_name='hits', to='tennis.Exchange')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('end_at', models.ForeignKey(blank=True, help_text='Ending point for this match', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='end_point_for_matches', to='sports.VideoPoint')),
            ],
        ),
        migrations.CreateModel(
            name='MatchPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_winner', models.BooleanField(help_text='Has the player won the match')),
                ('sets_won', models.IntegerField(help_text='Number of sets won by this player in this match')),
                ('match', models.ForeignKey(help_text='Corresponding match', on_delete=django.db.models.deletion.CASCADE, to='tennis.Match')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the player', max_length=1025)),
                ('email', models.EmailField(blank=True, help_text='Email of the player', max_length=254, null=True, unique=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Extra data associated with this player')),
                ('user', models.ForeignKey(blank=True, help_text='User associated with this player if registered', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(help_text='Index of this set in the match')),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict, help_text='Extra data associated with this set')),
                ('end_at', models.ForeignKey(blank=True, help_text='Ending point for this set', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='end_point_for_sets', to='sports.VideoPoint')),
                ('match', models.ForeignKey(help_text='Match associated with this set', on_delete=django.db.models.deletion.CASCADE, related_name='sets', to='tennis.Match')),
            ],
        ),
        migrations.CreateModel(
            name='SetPlayer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_winner', models.BooleanField(help_text='Has the player won the set')),
                ('games_won', models.IntegerField(help_text='Number of games won by this player in this set')),
                ('player', models.ForeignKey(help_text='Corresponding player', on_delete=django.db.models.deletion.CASCADE, to='tennis.Player')),
                ('tennis_set', models.ForeignKey(help_text='Corresponding set', on_delete=django.db.models.deletion.CASCADE, to='tennis.Set')),
            ],
        ),
        migrations.CreateModel(
            name='Training',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('end_at', models.ForeignKey(blank=True, help_text='Ending point for this training session', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='end_point_for_trainings', to='sports.VideoPoint')),
                ('session', models.ForeignKey(help_text='The sport session where the training took place', on_delete=django.db.models.deletion.CASCADE, related_name='trainings', to='sports.Session')),
                ('start_at', models.ForeignKey(blank=True, help_text='Starting point for this training session', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='start_point_for_trainings', to='sports.VideoPoint')),
            ],
        ),
        migrations.AddField(
            model_name='set',
            name='players',
            field=models.ManyToManyField(help_text='Players involved in this set', related_name='sets', through='tennis.SetPlayer', to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='set',
            name='start_at',
            field=models.ForeignKey(blank=True, help_text='Starting point for this set', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='start_point_for_sets', to='sports.VideoPoint'),
        ),
        migrations.AddField(
            model_name='matchplayer',
            name='player',
            field=models.ForeignKey(help_text='Corresponding player', on_delete=django.db.models.deletion.CASCADE, to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='match',
            name='players',
            field=models.ManyToManyField(help_text='Players involved in this match', related_name='matches', through='tennis.MatchPlayer', to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='match',
            name='session',
            field=models.ForeignKey(help_text='The sport session where the match took place', on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='sports.Session'),
        ),
        migrations.AddField(
            model_name='match',
            name='start_at',
            field=models.ForeignKey(blank=True, help_text='Starting point for this match', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='start_point_for_matches', to='sports.VideoPoint'),
        ),
        migrations.AddField(
            model_name='hit',
            name='hitter',
            field=models.ForeignKey(blank=True, help_text='Player hitting the ball', null=True, on_delete=django.db.models.deletion.CASCADE, to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='hit',
            name='video_point',
            field=models.ForeignKey(help_text='Point in time when the hit occurred', on_delete=django.db.models.deletion.CASCADE, to='sports.VideoPoint'),
        ),
        migrations.AddField(
            model_name='gameplayer',
            name='player',
            field=models.ForeignKey(help_text='Corresponding player', on_delete=django.db.models.deletion.CASCADE, to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='game',
            name='players',
            field=models.ManyToManyField(help_text='Players involved in this game', related_name='games', through='tennis.GamePlayer', to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='game',
            name='server',
            field=models.ForeignKey(help_text='Player serving for this game', on_delete=django.db.models.deletion.CASCADE, to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='game',
            name='set',
            field=models.ForeignKey(help_text='The set this game belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='games', to='tennis.Set'),
        ),
        migrations.AddField(
            model_name='game',
            name='start_at',
            field=models.ForeignKey(blank=True, help_text='Starting point for this game', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='start_point_for_games', to='sports.VideoPoint'),
        ),
        migrations.AddField(
            model_name='exchangeplayer',
            name='player',
            field=models.ForeignKey(help_text='Corresponding player', on_delete=django.db.models.deletion.CASCADE, to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='exchange',
            name='game',
            field=models.ForeignKey(blank=True, help_text='Game associated with this exchange', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exchanges', to='tennis.Game'),
        ),
        migrations.AddField(
            model_name='exchange',
            name='players',
            field=models.ManyToManyField(help_text='Players involved in this exchange', related_name='exchanges', through='tennis.ExchangePlayer', to='tennis.Player'),
        ),
        migrations.AddField(
            model_name='exchange',
            name='start_at',
            field=models.ForeignKey(blank=True, help_text='Starting point for this exchange', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='start_point_for_exchanges', to='sports.VideoPoint'),
        ),
        migrations.AddField(
            model_name='exchange',
            name='training',
            field=models.ForeignKey(blank=True, help_text='Training associated with this exchange', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='exchanges', to='tennis.Training'),
        ),
    ]
