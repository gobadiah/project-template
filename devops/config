#!/bin/zsh

# Defines generic environment variables used in every devops script.

function silent() {
  # Run a command and print the output only in case of failure
  cmd=$1
  shift
  exit_code=0
  # We want to capture cmd output and exit code while still having a final
  # exit code of 0, since with set -e the script would end here otherwise.
  $cmd "$@" 2>&1 | tee /tmp/out.txt >/dev/null
  exit_code=${pipestatus[1]}
  if [ $exit_code -ne 0 ]; then
    print -P "%F{red}$(cat /tmp/out.txt)%f"
  fi
  return $exit_code
}

function get_default_env() {
  # Get the env from current branch
  # production and staging are special since we might want to limit access
  # to them.
  branch=$(git rev-parse --abbrev-ref HEAD)
  if [[ $branch == "master" ]]; then
    DEFAULT_ENV="production"
  elif [[ $branch == "develop" ]]; then
    DEFAULT_ENV="staging"
  else
    DEFAULT_ENV=$(echo "$branch" | sed -E 's/^(feature\/|hotfix\/|release\/|support\/)?(.*)/\2/' | sed 's#/#-#g')
  fi
}

function get_host() {
  env=$1

  if [[ "$env" == "production" ]]; then
    export HOST="$DOMAIN"
  elif [[ "$env" == "staging" ]]; then
    export HOST="staging.$DOMAIN"
  else
    export HOST="$env.env.$DOMAIN"
  fi
}

get_default_env

export ENV=${ENV:=$DEFAULT_ENV}

get_host $ENV

export CLUSTER_NAME="$ENV.k8s.local"

export VAULT_CLUSTER_PATH="secret/$CLUSTER_NAME"
export VAULT_AWS_PATH=$CLUSTER_NAME/aws
export VAULT_K8S_PATH=$CLUSTER_NAME/k8s

# CIRCLECI

if [[ "$ENV" == "production" ]]; then
  prefix="production"
elif [[ "$ENV" == "staging" ]]; then
  prefix="staging"
else
  prefix="env"
fi

CIRCLECI_POLICY="$prefix-$CLUSTER_NAME-k8s-circleci-user"
CIRCLECI_ROLE="circleci-$prefix-$CLUSTER_NAME"
