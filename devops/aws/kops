#!/bin/zsh
# aws commands for using or setting up kops
KOPS_GROUP_NAME=kops
BUCKET_NAME=${KOPS_STATE_STORE[6,-1]}

function setup_kops() {
  # Create the kops group with required policies, as well as the s3 bucket for
  # storing clusters configurations.

  aws iam get-group --group-name $KOPS_GROUP_NAME &>/dev/null || \
    aws iam create-group --group-name $KOPS_GROUP_NAME

  aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name $KOPS_GROUP_NAME
  aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name $KOPS_GROUP_NAME
  aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name $KOPS_GROUP_NAME
  aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name $KOPS_GROUP_NAME
  aws iam attach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name $KOPS_GROUP_NAME

  # $KOPS_STATE_STORE used by kops starts with s3:// and we only want the bucket
  # name.
  aws s3api list-buckets | grep -q \"$BUCKET_NAME\" || \
    aws s3api create-bucket --bucket $BUCKET_NAME \
      --region $AWS_DEFAULT_REGION \
      --create-bucket-configuration LocationConstraint=$AWS_DEFAULT_REGION

  # We enable versioning so as to be able to revert to previous cluster
  # configuration.
  # https://github.com/kubernetes/kops/blob/master/docs/aws.md
  aws s3api put-bucket-versioning --bucket $BUCKET_NAME \
    --versioning-configuration Status=Enabled
}

function teardown_kops() {
  # Delete the kops group after detaching each policies, and s3 bucket

  # only do this with --confirm argument, we might lose informations on
  # existing clusters.
  if [[ $1 != "--confirm" ]]; then  return; fi

  aws iam detach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess --group-name $KOPS_GROUP_NAME &>/dev/null
  aws iam detach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonRoute53FullAccess --group-name $KOPS_GROUP_NAME &>/dev/null
  aws iam detach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonS3FullAccess --group-name $KOPS_GROUP_NAME &>/dev/null
  aws iam detach-group-policy --policy-arn arn:aws:iam::aws:policy/IAMFullAccess --group-name $KOPS_GROUP_NAME &>/dev/null
  aws iam detach-group-policy --policy-arn arn:aws:iam::aws:policy/AmazonVPCFullAccess --group-name $KOPS_GROUP_NAME &>/dev/null

  aws iam get-group --group-name $KOPS_GROUP_NAME &>/dev/null && \
    aws iam delete-group --group-name $KOPS_GROUP_NAME

  aws s3api list-buckets | grep -q \"$BUCKET_NAME\" && \
    aws s3api delete-bucket --bucket $BUCKET_NAME
}
