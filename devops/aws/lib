#!/usr/local/bin/zsh

REGION=${REGION:=$AWS_DEFAULT_REGION}

function get_user_id() {
  USER_ID=$(aws iam list-users | jq -r ".Users | map(select(.UserName == \"$USER\")) | .[0].UserId")
}

function get_policy_arn() {
  POLICY_ARN=$(aws iam list-policies | jq -r ".Policies[] | select(.PolicyName==\"$POLICY\") | .Arn")
}

function clear_access_keys() {
  aws iam list-access-keys --user-name $USER | jq -r '.AccessKeyMetadata[].AccessKeyId' | xargs -I {} aws iam delete-access-key --user-name $USER --access-key-id {}
}

function create_bucket() {
  aws s3api list-buckets | grep -q "\"$BUCKET\""
  if [ $? -ne 0 ]
  then
    aws s3api create-bucket --acl "public-read" --region $REGION --create-bucket-configuration LocationConstraint=$REGION --bucket $BUCKET
    if [ $? -ne 0 ]; then  exit 1; fi
    sed -e "s#__WEB_URL__#$WEB_URL#" $SCRIPTPATH/files/bucket-cors.template.json > $TMP/bucket-cors.json
    aws s3api put-bucket-cors --bucket $BUCKET --cors-configuration file://$TMP/bucket-cors.json
    if [ $? -ne 0 ]; then  exit 1; fi
    aws s3api put-bucket-tagging --bucket $BUCKET --tagging "TagSet=[{Key=ENV,Value=$ENV}]"
    if [ $? -ne 0 ]; then  exit 1; fi
  fi
}

function delete_bucket() {
  aws s3api list-buckets | grep -q "\"$BUCKET\""
  if [ $? -eq 0 ]
  then
    aws s3 rm s3://$BUCKET --recursive
    aws s3api delete-bucket --bucket $BUCKET
    if [ $? -ne 0 ]; then  exit 1; fi
  fi
}

function create_policy() {
  aws iam list-policies | jq -er ".Policies[] | select(.PolicyName==\"$POLICY\")" > /dev/null
  if [ $? -ne 0 ]
  then
    sed -e "s/__BUCKET__/$BUCKET/g" $SCRIPTPATH/files/$POLICY_BASE.template.json > $TMP/$POLICY_BASE.json
    aws iam create-policy --policy-name $POLICY --policy-document file://$TMP/$POLICY_BASE.json
    if [ $? -ne 0 ]; then  exit 1; fi
  fi
}

function delete_policy() {
  aws iam list-policies | jq -er ".Policies[] | select(.PolicyName==\"$POLICY\")" > /dev/null
  if [ $? -eq 0 ]
  then
    get_policy_arn
    aws iam delete-policy --policy-arn $POLICY_ARN
    if [ $? -ne 0 ]; then  exit 1; fi
  fi
}

function create_user() {
  aws iam list-users | grep -q "\"$USER\""
  if [ $? -ne 0 ]
  then
    aws iam create-user --user $USER
    if [ $? -ne 0 ]; then  exit 1; fi
    sleep 10 # Time for the user to be created ...
  fi
}

function delete_user() {
  aws iam list-users | grep -q "\"$USER\""
  if [ $? -eq 0 ]
  then
    aws iam delete-user --user $USER
    if [ $? -ne 0 ]; then  exit 1; fi
  fi
}

function attach_policy() {
  get_policy_arn
  aws iam list-user-policies --user-name $USER | grep -q "\"$POLICY\""
  if [ $? -ne 0 ]
  then
    aws iam attach-user-policy --user-name $USER --policy-arn $POLICY_ARN
    if [ $? -ne 0 ]; then  exit 1; fi
  fi
}

function detach_user_policy() {
  get_policy_arn
  echo "POLICY_ARN = $POLICY_ARN"
  aws iam list-attached-user-policies --user-name $USER
  aws iam list-attached-user-policies --user-name $USER | grep -q "\"$POLICY\""
  if [ $? -eq 0 ]
  then
    aws iam detach-user-policy --user-name $USER --policy-arn $POLICY_ARN
    if [ $? -ne 0 ]; then  exit 1; fi
  fi
}

function create_access_key() {
  aws iam create-access-key --user-name "$USER" > $AWS_OUTPUT_CONFIG
  if [ $? -ne 0 ]
  then
    clear_access_keys
    aws iam create-access-key --user-name "$USER" > $AWS_OUTPUT_CONFIG
  fi
}

function list_envs() {
  aws resourcegroupstaggingapi get-tag-values --key ENV | jq -r '.TagValues[]'
}
