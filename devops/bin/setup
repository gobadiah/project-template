#!/bin/zsh

# exit on error
set -e

color=blue

# Path to this file, so we don't have to worry about where this script was
# called from.
SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

source $SCRIPTPATH/lib/config

print -nP "%F{$color}"
print -nP "Create a k8s cluster, this can take up to a few minutes... "
if [[ "$(kubectl config current-context)" == "$CLUSTER_NAME" ]]; then
  print -nP "%F{cyan}Cluster is already current context%F{$color} "
elif kubectl config get-contexts | grep -q " $CLUSTER_NAME "; then
  print -nP "%F{cyan}Cluster is already created, setting current context to it %F{$color}"
  silent kubectl config use-context $CLUSTER_NAME
else
  silent create_cluster --cluster-name $CLUSTER_NAME --wait
fi
print -P "%F{green}done.%F{$color}"

print -nP "Install the kubernetes dashboard for convenience... "
silent kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
print -P "%F{green}done.%F{$color}"

print -nP "Generate credentials for the dashboard and store them in vault at %F{yellow}$VAULT_CLUSTER_PATH/dashboard%F{$color}... "
DASHBOARD_TOKEN=$(kubectl -n kube-system describe secrets \
   `kubectl -n kube-system get secrets | awk '/clusterrole-aggregation-controller/ {print $1}'` \
   | awk '/token:/ {print $2}')
silent vault write $VAULT_CLUSTER_PATH/dashboard token=$DASHBOARD_TOKEN
print -P "%F{green}done.%F{$color}"

print -nP "Configuring aws secret backend for this cluster in vault... "
silent $SCRIPTPATH/../toolbox/bin/vault-aws-config -path
print -P "%F{green}done.%F{$color}"

print -nP "Configuring k8s auth backend for this cluster in vault... "
silent vault-k8s-config
print -P "%F{green}done.%F{$color}"
